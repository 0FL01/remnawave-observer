import os
import json
import logging
import asyncio
from typing import List, Set, Dict
from datetime import datetime, timedelta
import httpx
import aio_pika
import redis.asyncio as redis
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")
RABBITMQ_URL = os.getenv("RABBITMQ_URL", "amqp://guest:guest@localhost/")
MAX_IPS_PER_USER = int(os.getenv("MAX_IPS_PER_USER", 3))
ALERT_WEBHOOK_URL = os.getenv("ALERT_WEBHOOK_URL")
USER_IP_TTL_SECONDS = int(os.getenv("USER_IP_TTL_SECONDS", 24 * 60 * 60))
ALERT_COOLDOWN_SECONDS = int(os.getenv("ALERT_COOLDOWN_SECONDS", 60 * 60))
BLOCK_DURATION = os.getenv("BLOCK_DURATION", "5m")
BLOCKING_EXCHANGE_NAME = "blocking_exchange"
MONITORING_INTERVAL = int(os.getenv("MONITORING_INTERVAL", 300))  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
excluded_users_str = os.getenv("EXCLUDED_USERS", "")
EXCLUDED_USERS: Set[str] = {email.strip() for email in excluded_users_str.split(',') if email.strip()}

if EXCLUDED_USERS:
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {len(EXCLUDED_USERS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
app = FastAPI(title="Observer Service", version="1.2.1")
redis_client = redis.from_url(REDIS_URL, decode_responses=True)
http_client = httpx.AsyncClient()
rabbitmq_connection = None
blocking_exchange = None
monitoring_task = None

async def get_user_active_ips(user_email: str) -> Dict[str, int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Ö TTL.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {ip: ttl_seconds}
    """
    user_ips_pattern = f"user_ip:{user_email}:*"
    ip_keys = await redis_client.keys(user_ips_pattern)
    
    if not ip_keys:
        return {}
    
    # –ü–æ–ª—É—á–∞–µ–º TTL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ IP
    async with redis_client.pipeline() as pipe:
        for key in ip_keys:
            pipe.ttl(key)
        ttl_results = await pipe.execute()
    
    active_ips = {}
    for key, ttl in zip(ip_keys, ttl_results):
        if ttl > 0:  # –ö–ª—é—á –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
            # –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∏–∑ –∫–ª—é—á–∞: user_ip:email:192.168.1.1 -> 192.168.1.1
            ip = key.split(":", 2)[2]
            active_ips[ip] = ttl
    
    return active_ips

async def cleanup_expired_user_ips(user_email: str) -> int:
    """
    –£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ IP-–∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö IP.
    """
    user_ips_pattern = f"user_ip:{user_email}:*"
    ip_keys = await redis_client.keys(user_ips_pattern)
    
    if not ip_keys:
        return 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
    async with redis_client.pipeline() as pipe:
        for key in ip_keys:
            pipe.ttl(key)
        ttl_results = await pipe.execute()
    
    expired_keys = []
    for key, ttl in zip(ip_keys, ttl_results):
        if ttl <= 0:  # –ö–ª—é—á –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            expired_keys.append(key)
    
    if expired_keys:
        await redis_client.delete(*expired_keys)
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(expired_keys)} –∏—Å—Ç–µ–∫—à–∏—Ö IP –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_email}")
    
    return len(expired_keys)

async def monitor_user_ip_pools():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ IP-–ø—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    while True:
        try:
            await asyncio.sleep(MONITORING_INTERVAL)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            pattern = "user_ip:*"
            all_ip_keys = await redis_client.keys(pattern)
            
            if not all_ip_keys:
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] === IP POOLS MONITORING === –ù–ï–¢ –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
                continue
            
            print(f"\n[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] === IP POOLS MONITORING START ===")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            user_emails = set()
            for key in all_ip_keys:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ –∫–ª—é—á–∞: user_ip:email:192.168.1.1 -> email
                parts = key.split(":", 2)
                if len(parts) >= 2:
                    user_emails.add(parts[1])
            
            total_users = 0
            users_near_limit = 0
            users_over_limit = 0
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_stats: List[Dict] = []
            
            for user_email in user_emails:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ IP —Å –∏—Ö TTL
                    active_ips = await get_user_active_ips(user_email)
                    
                    if active_ips:
                        total_users += 1
                        ip_count = len(active_ips)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        status = "NORMAL"
                        if ip_count >= MAX_IPS_PER_USER * 0.8:  # 80% –æ—Ç –ª–∏–º–∏—Ç–∞
                            status = "NEAR_LIMIT"
                            users_near_limit += 1
                        if ip_count > MAX_IPS_PER_USER:
                            status = "OVER_LIMIT"
                            users_over_limit += 1
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫—É–ª–¥–∞—É–Ω –Ω–∞ –∞–ª–µ—Ä—Ç—ã
                        alert_cooldown_key = f"alert_sent:{user_email}"
                        has_alert_cooldown = await redis_client.exists(alert_cooldown_key)
                        
                        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± IP —Å TTL
                        ips_with_ttl = []
                        for ip, ttl in active_ips.items():
                            ttl_hours = round(ttl / 3600, 1)
                            ips_with_ttl.append(f"{ip}({ttl_hours}h)")
                        
                        user_stats.append({
                            'email': user_email,
                            'ip_count': ip_count,
                            'ips': sorted(list(active_ips.keys())),
                            'ips_with_ttl': sorted(ips_with_ttl),
                            'min_ttl_hours': round(min(active_ips.values()) / 3600, 1),
                            'max_ttl_hours': round(max(active_ips.values()) / 3600, 1),
                            'status': status,
                            'has_alert_cooldown': bool(has_alert_cooldown),
                            'excluded': user_email in EXCLUDED_USERS
                        })
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_email}: {e}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É IP (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
            user_stats.sort(key=lambda x: x['ip_count'], reverse=True)
            
            # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
            print(f"   ‚ö†Ô∏è  –ë–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É ({MAX_IPS_PER_USER}): {users_near_limit}")
            print(f"   üö® –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞: {users_over_limit}")
            print(f"   üõ°Ô∏è  –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len([u for u in user_stats if u['excluded']])}")
            
            # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º IP
            print(f"\nüìà –¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ IP:")
            for i, user in enumerate(user_stats[:10], 1):
                status_emoji = {
                    'NORMAL': '‚úÖ',
                    'NEAR_LIMIT': '‚ö†Ô∏è',
                    'OVER_LIMIT': 'üö®'
                }.get(user['status'], '‚ùì')
                
                excluded_marker = ' [EXCLUDED]' if user['excluded'] else ''
                cooldown_marker = ' [ALERT_COOLDOWN]' if user['has_alert_cooldown'] else ''
                
                print(f"   {i:2d}. {status_emoji} {user['email']}{excluded_marker}{cooldown_marker}")
                print(f"       IP: {user['ip_count']}/{MAX_IPS_PER_USER} | TTL: {user['min_ttl_hours']}-{user['max_ttl_hours']}h")
                print(f"       IPs: {', '.join(user['ips_with_ttl'])}")
            
            # –û—Ç–¥–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–∞
            over_limit_users = [u for u in user_stats if u['status'] == 'OVER_LIMIT']
            if over_limit_users:
                print(f"\nüö® –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ü–†–ï–í–´–®–ï–ù–ò–ï–ú –õ–ò–ú–ò–¢–ê:")
                for user in over_limit_users:
                    excluded_marker = ' [EXCLUDED - –ù–ï –ë–õ–û–ö–ò–†–£–ï–¢–°–Ø]' if user['excluded'] else ''
                    cooldown_marker = ' [ALERT_COOLDOWN]' if user['has_alert_cooldown'] else ''
                    print(f"   ‚Ä¢ {user['email']}{excluded_marker}{cooldown_marker}")
                    print(f"     IP: {user['ip_count']}/{MAX_IPS_PER_USER} | TTL: {user['min_ttl_hours']}-{user['max_ttl_hours']}h")
                    print(f"     IPs: {', '.join(user['ips_with_ttl'])}")
            
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] === IP POOLS MONITORING END ===\n")
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ IP-–ø—É–ª–æ–≤: {e}")
            await asyncio.sleep(30)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

@app.on_event("startup")
async def startup_event():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ –∏ –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global rabbitmq_connection, blocking_exchange, monitoring_task
    try:
        rabbitmq_connection = await aio_pika.connect_robust(RABBITMQ_URL)
        channel = await rabbitmq_connection.channel()
        blocking_exchange = await channel.declare_exchange(
            BLOCKING_EXCHANGE_NAME, aio_pika.ExchangeType.FANOUT, durable=True
        )
        logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RabbitMQ: {e}")
        rabbitmq_connection = None
    
    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ IP-–ø—É–ª–æ–≤
    monitoring_task = asyncio.create_task(monitor_user_ip_pools())
    logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ IP-–ø—É–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {MONITORING_INTERVAL} —Å–µ–∫—É–Ω–¥.")

@app.on_event("shutdown")
async def shutdown_event():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    global monitoring_task
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if monitoring_task:
        monitoring_task.cancel()
        try:
            await monitoring_task
        except asyncio.CancelledError:
            pass
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ IP-–ø—É–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    
    if rabbitmq_connection:
        await rabbitmq_connection.close()
    await http_client.aclose()
    await redis_client.aclose()
    logger.info("–í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã.")

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class LogEntry(BaseModel):
    user_email: str = Field(..., alias="user_email")
    source_ip: str = Field(..., alias="source_ip")

class AlertPayload(BaseModel):
    user_identifier: str
    detected_ips_count: int
    limit: int
    violation_type: str = "ip_limit_exceeded"

@app.post("/log-entry")
async def process_log_entries(entries: List[LogEntry]):
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ–≤."""
    for entry in entries:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            if entry.user_email in EXCLUDED_USERS:
                continue

            # –ù–æ–≤–∞—è —Å—Ö–µ–º–∞: –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ IP
            user_ip_key = f"user_ip:{entry.user_email}:{entry.source_ip}"
            alert_sent_key = f"alert_sent:{entry.user_email}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π IP —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ip_exists = await redis_client.exists(user_ip_key)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º TTL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ IP
            await redis_client.setex(user_ip_key, USER_IP_TTL_SECONDS, datetime.now().isoformat())
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            active_ips = await get_user_active_ips(entry.user_email)
            current_ip_count = len(active_ips)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ –∞–ª–µ—Ä—Ç—ã
            alert_was_sent = await redis_client.exists(alert_sent_key)

            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ IP –Ω–æ–≤—ã–π
            if not ip_exists:
                logger.info(f"–ù–æ–≤—ã–π IP –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {entry.user_email}: {entry.source_ip}. –í—Å–µ–≥–æ IP: {current_ip_count}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫—É–ª–¥–∞—É–Ω–∞
            if current_ip_count > MAX_IPS_PER_USER and not alert_was_sent:
                logger.warning(f"–ü–†–ï–í–´–®–ï–ù–ò–ï –õ–ò–ú–ò–¢–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {entry.user_email}, IP-–∞–¥—Ä–µ—Å–æ–≤: {current_ip_count}/{MAX_IPS_PER_USER}.")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö IP
                all_user_ips = list(active_ips.keys())
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ RabbitMQ
                if blocking_exchange and all_user_ips:
                    block_message_body = {"ips": all_user_ips, "duration": BLOCK_DURATION}
                    message = aio_pika.Message(
                        body=json.dumps(block_message_body).encode(),
                        delivery_mode=aio_pika.DeliveryMode.PERSISTENT
                    )
                    await blocking_exchange.publish(message, routing_key="")
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–ª—è {entry.user_email} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –Ω–∞ –∞–ª–µ—Ä—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await redis_client.setex(alert_sent_key, ALERT_COOLDOWN_SECONDS, "1")
                if ALERT_WEBHOOK_URL:
                    alert_payload = AlertPayload(
                        user_identifier=entry.user_email,
                        detected_ips_count=current_ip_count,
                        limit=MAX_IPS_PER_USER,
                    )
                    try:
                        await http_client.post(ALERT_WEBHOOK_URL, json=alert_payload.dict(), timeout=10.0)
                    except httpx.RequestError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è {entry.user_email}: {e}")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è {entry.user_email}: {e}")

    return {"status": "ok", "processed_entries": len(entries)}

@app.get("/health")
async def health_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."""
    try:
        await redis_client.ping()
        return {"status": "ok", "redis_connection": "ok"}
    except Exception as e:
        raise HTTPException(status_code=503, detail=f"Redis connection failed: {e}")