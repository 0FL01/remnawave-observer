#!/usr/sbin/nft -f

flush ruleset

# Константы для портов
define SSH_PORT = 22
define CONTROL_PORT = 2222
define MONITORING_PORT = 9100
define WEB_PORTS = { 80, 443 }

table inet firewall {

    # Динамический blacklist для "DDoS-источников"
    set ddos_blacklist {
        type ipv4_addr
        flags timeout 
        timeout 5m    
        size 8192     
        comment "Dynamic blacklist for DDoS sources"
    }

    # Сюда будут добавляться заблокированные ип адреса, замеченные observer
    set user_blacklist {
        type ipv4_addr
        flags timeout
        size 8192
        comment "Dynamic blacklist for subscription policy violators"
    }

    # Сюда добавляете ип адрес remnawave панель
    set control_plane_sources {
        type ipv4_addr
        elements = { IP_ADRESS }
    }
    
    # Сюда можно добавить хост для сбора метрик (например прометеус/blackbox-exporter)
    set monitoring_sources {
        type ipv4_addr
        elements = { IP_ADRESS }
    }

    set tls_flood_sources {
        type ipv4_addr
        flags timeout
        timeout 15m
        size 4096
    }

    chain prerouting {
        type filter hook prerouting priority raw; policy accept;
        
        # Блокировка нарушителей
        ip saddr @user_blacklist drop comment "Drop traffic from policy violators"
 
        ip6 version 6 drop comment "Block IPv6 completely"
        iif != lo ip saddr 127.0.0.0/8 drop comment "Block spoofed loopback from external"
        ip frag-off & 0x1fff != 0 drop comment "Drop fragmented packets"
        
        tcp flags & (fin|syn|rst|psh|ack|urg) == 0 drop comment "Drop NULL packets"
        tcp flags & (fin|syn|rst|psh|ack|urg) == fin|syn|rst|psh|ack|urg drop comment "Drop XMAS packets"
        tcp flags & (syn|rst) == syn|rst drop comment "Drop SYN+RST packets"
        tcp flags & (syn|fin) == syn|fin drop comment "Drop SYN+FIN packets"
        
        fib daddr type broadcast drop comment "Drop broadcast early"
        fib daddr type multicast drop comment "Drop multicast early"
        fib daddr type anycast   drop comment "Drop anycast early"
        
        ip saddr @ddos_blacklist drop comment "Drop blacklisted source early"
        
        tcp dport $SSH_PORT tcp flags & (syn|ack) == syn limit rate 5/second burst 3 packets accept comment "SSH SYN flood limit"
        tcp dport $SSH_PORT tcp flags & (syn|ack) == syn add @ddos_blacklist { ip saddr timeout 5m } drop comment "Blacklist SSH flooders"
        
        ip protocol icmp icmp type echo-request limit rate 2/second burst 2 packets accept comment "Allow limited ping"
        ip protocol icmp icmp type echo-request add @ddos_blacklist { ip saddr timeout 5m } drop comment "Blacklist ping flooders"
    }
    
    chain forward {
        type filter hook forward priority filter; policy drop;
        ct state established,related accept comment "Allow established forward"
        drop comment "Drop forward"
    }
    
    chain output {
        type filter hook output priority filter; policy accept;
    }

    chain filter_input {
        type filter hook input priority filter; policy drop;
        
        iif lo accept comment "Allow loopback"
        ct state invalid drop comment "Drop invalid packets"
        ct state established,related accept comment "Allow established"
        
        ip saddr @ddos_blacklist drop comment "Drop known DDoS sources"
        
        # Connection limits
        tcp dport $WEB_PORTS ct count over 100 drop comment "Limit concurrent web connections"
        tcp dport $SSH_PORT ct count over 15 drop comment "Limit SSH connections"
        ct count over 100 drop comment "Limit total connections per IP"
        
        # SSH protection
        tcp dport $SSH_PORT ct state new meter ssh_meter { ip saddr limit rate 5/minute burst 3 packets } accept comment "SSH rate limit"
        tcp dport $SSH_PORT ct state new add @ddos_blacklist { ip saddr timeout 5m } drop comment "SSH flood → blacklist"
        
        # Control и monitoring
        ip saddr @control_plane_sources tcp dport $CONTROL_PORT ct state new accept comment "Control plane"
        ip saddr @monitoring_sources tcp dport $MONITORING_PORT ct state new accept comment "Monitoring"
        
        # TLS protection
        ip saddr @tls_flood_sources drop comment "Drop TLS flooded IPs"
        tcp dport 443 ct state new meter tls_meter { ip saddr limit rate 400/second burst 300 packets } accept comment "TLS connections"
        tcp dport 443 ct state new add @tls_flood_sources { ip saddr timeout 5m } drop comment "TLS flood → temp block"
        
        # HTTP для cert renewal
        tcp dport 80 ct state new meter cert_meter { ip saddr limit rate 5/minute burst 3 packets } accept comment "HTTP cert renewal"
        
        drop comment "Default drop"
    }
}