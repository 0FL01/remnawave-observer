# Источник данных: указываем, откуда читать логи.
# Мы будем читать access.log из директории, которую пробросим из remnanode.
[sources.xray_access_logs]
  type = "file"
  # ВАЖНО: Путь внутри контейнера Vector. Мы пробросим /var/log/remnanode с хоста.
  include = ["/var/log/remnanode/access.log"] 
  # Начинаем читать с конца файла, чтобы не обрабатывать старые записи при перезапуске
  read_from = "end"

# Трансформация: парсим каждую строку лога, чтобы извлечь нужные данные.
[transforms.parse_xray_log]
  type = "remap"
  inputs = ["xray_access_logs"]
  source = '''
    # (tcp:)? означает, что группа "tcp:" может присутствовать 0 или 1 раз.
    pattern = r'from (tcp:)?(?P<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):\d+.*? email: (?P<email>\S+)'
    
    parsed, err = parse_regex(.message, pattern)

    if err != null {
      log("Не удалось распарсить строку лога: " + err, level: "warn")
      abort
    }

    . = {
      "user_email": parsed.email,
      "source_ip": parsed.ip,
      "timestamp": to_string(now())
    }
  '''

# Назначение: отправляем обработанные данные на наш центральный сервис-наблюдатель.
[sinks.central_observer_api]
  type = "http"
  inputs = ["parse_xray_log"]
  # ВАЖНО: Указываем HTTPS и ваш домен!
  uri = "https://HEAD_DOMAIN:38213/"
  method = "post"
  encoding.codec = "json"
  compression = "gzip"

  [sinks.central_observer_api.batch]
    max_events = 100
    timeout_secs = 5

  [sinks.central_observer_api.request]
    retry_attempts = 5
    retry_backoff_secs = 2

  [sinks.central_observer_api.tls]